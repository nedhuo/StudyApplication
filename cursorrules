# Gradle 构建文件规则

6. feature/业务模块独立运行规范：
   - 所有 feature_ 或业务功能模块（如 feature_xxx）如需支持独立运行，必须支持 isModuleRunAlone 配置：
     - 在 build.gradle.kts 中根据 ProjectConfig.isModuleRunAlone 用如下写法动态切换 application/library 插件：
       plugins {
         id(if (ProjectConfig.isModuleRunAlone) Plugins.androidApplication else Plugins.androidLibrary)
         ...
       }
     - android {} 和 dependencies {} 必须为顶层代码块，不能嵌套在 if/else 或其他代码块内。
     - 独立运行时（isModuleRunAlone=true）在 android { defaultConfig { ... } } 内设置 applicationId，作为可单独调试的 app
     - 作为依赖库时（isModuleRunAlone=false）不设置 applicationId
   - 统一基础配置调用 configureAndroidApp()，其调用位置应在 android{} 内部
   - applicationId、minSdk、compileSdk、testInstrumentationRunner 等所有配置均引用 buildSrc 常量

1. 项目使用 Kotlin DSL 进行 Gradle 配置，所有模块都应使用 `.kts` 扩展名的构建文件：
   - 使用 `build.gradle.kts` 而不是 `build.gradle`
   - 使用 `settings.gradle.kts` 而不是 `settings.gradle`

2. 依赖声明规则：
   - 使用 `implementation(project(ProjectModules.xxx))` 格式声明项目间依赖
   - 使用 `implementation(Deps.Xxx.xxx)` 格式声明外部依赖
   - 所有依赖版本都应在 `buildSrc/src/main/kotlin/Dependencies.kt` 中集中管理

3. 模块命名规则：
   - 基础库模块使用 `lib_` 前缀
   - 功能模块使用 `feature_` 前缀
   - 模块名使用小写字母，单词间用下划线分隔

4. 模块依赖规则：
   - 严禁出现循环依赖
   - `lib_log` 作为独立日志模块，不依赖任何其他模块
   - `lib_base` 作为基础模块，可以依赖 `lib_log` 和其他基础功能模块
   - 功能模块（`feature_`）之间不能直接依赖，必须通过基础模块进行交互
   - 依赖关系应该是单向的，避免模块间的循环依赖 

# 项目分层架构与包内分层管理规范

## 一、分层说明

1. **lib_ 层（基础能力层）**
   - 只放最底层、全局通用、无业务色彩的能力模块。
   - 例如：lib_base（基类/工具）、lib_network（网络）、lib_log（日志）、lib_database（数据库）、lib_config（配置）、lib_ui（通用UI组件）等。

2. **common 层（通用业务层）**
   - 只建立一个 common 模块（如 common 或 common_business）。
   - 在 common 内部通过包结构（package）进行业务领域分层管理。
   - 每个包负责一个通用业务领域，包内可有自己的数据模型、接口、实现等。
   - 例如：user（用户）、pay（支付）、share（分享）、message（消息）、media（多媒体）、location（定位）、coupon（优惠券）、address（地址）、comment（评论）、analytics（埋点/统计）等。

3. **feat_ 层（业务功能层）**
   - 每个具体业务功能建立独立模块。
   - 只依赖 common 和 lib_，不直接依赖其他 feat_。
   - 例如：feat_home（首页）、feat_order（订单）、feat_product（商品）、feat_cart（购物车）、feat_profile（个人中心）、feat_login（登录/注册）、feat_main（主入口）等。

## 二、依赖关系建议

- lib_ 层：不依赖 common 和 feat_，只被上层依赖。
- common 层：只依赖 lib_，不依赖 feat_。
- feat_ 层：可依赖 common 和 lib_，不依赖其他 feat_。

## 三、common 层包内分层管理建议

- 每个包下可有自己的 data、ui、service、repository、utils 等子包。
- 例如：
  common/
    └── user/
        ├── data/
        ├── ui/
        ├── service/
        ├── repository/
        └── UserManager.kt

## 四、补充建议

- 如果某个通用业务包变得非常庞大，可以考虑将其独立为 common_xxx 模块。
- 保持包内代码风格和规范统一，便于团队协作。
- 定期梳理和归档不再通用的代码，保持 common 层"瘦身"。 

5. Gradle 配置与依赖声明规范：
   - 所有 Gradle 配置（如 compileSdk、minSdk、targetSdk）和依赖声明，必须统一使用 buildSrc/src/main/kotlin/ProjectConfig.kt 和 Dependencies.kt 中的常量。
   - 禁止在各模块的 build.gradle.kts 文件中硬编码版本号或依赖字符串，确保依赖和版本的集中管理与维护。 